/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.Date;
import ru.fds.hrdepartment.dto.EmployeeDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-29T00:16:51.113+06:00")

@Api(value = "emp", description = "the emp API")
public interface EmpApi {

    @ApiOperation(value = "delete employee", nickname = "deleteEmployee", notes = "", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/emp/delete",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEmployee(@NotNull @ApiParam(value = "employeeId", required = true) @Valid @RequestParam(value = "employeeId", required = true) Long employeeId);


    @ApiOperation(value = "get employee by id", nickname = "getEmployee", notes = "", response = EmployeeDto.class, tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/{employeeId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmployeeDto> getEmployee(@ApiParam(value = "employeeId",required=true) @PathVariable("employeeId") Long employeeId);


    @ApiOperation(value = "get employees at work in specified date", nickname = "getEmployeesDateAtWork", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/date/at_work",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesDateAtWork(@NotNull @ApiParam(value = "date", required = true) @Valid @RequestParam(value = "date", required = true) Date date);


    @ApiOperation(value = "get employees in absence on specified date", nickname = "getEmployeesDateInAbsence", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/date/absence",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesDateInAbsence(@NotNull @ApiParam(value = "date", required = true) @Valid @RequestParam(value = "date", required = true) Date date);


    @ApiOperation(value = "get employees on sick leave at specified date", nickname = "getEmployeesDateOnSickLeave", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/date/on_sick_leave",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesDateOnSickLeave(@NotNull @ApiParam(value = "date", required = true) @Valid @RequestParam(value = "date", required = true) Date date);


    @ApiOperation(value = "get employees on vacation at specified date", nickname = "getEmployeesDateOnVacation", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/date/on_vacation",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesDateOnVacation(@NotNull @ApiParam(value = "date", required = true) @Valid @RequestParam(value = "date", required = true) Date date);


    @ApiOperation(value = "get employees at work now", nickname = "getEmployeesNowAtWork", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/now/at_work",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesNowAtWork();


    @ApiOperation(value = "get employees in absence now", nickname = "getEmployeesNowInAbsence", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/now/absence",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesNowInAbsence();


    @ApiOperation(value = "get employees on sick leave now", nickname = "getEmployeesNowOnSickLeave", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/now/on_sick_leave",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesNowOnSickLeave();


    @ApiOperation(value = "get employees on vacation now", nickname = "getEmployeesNowOnVacation", notes = "", response = EmployeeDto.class, responseContainer = "List", tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/now/on_vacation",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDto>> getEmployeesNowOnVacation();


    @ApiOperation(value = "get total work days for employee", nickname = "getWorkDaysByEmployee", notes = "", response = Integer.class, tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/all_days",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getWorkDaysByEmployee(@NotNull @ApiParam(value = "employeeId", required = true) @Valid @RequestParam(value = "employeeId", required = true) Long employeeId);


    @ApiOperation(value = "insert new employee", nickname = "insertEmployee", notes = "", response = EmployeeDto.class, tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/new",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<EmployeeDto> insertEmployee(@ApiParam(value = "employeeDto" ,required=true )  @Valid @RequestBody EmployeeDto employeeDto);


    @ApiOperation(value = "update employee", nickname = "updateEmployee", notes = "", response = EmployeeDto.class, tags={ "employeeController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/emp/update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<EmployeeDto> updateEmployee(@ApiParam(value = "employeeDto" ,required=true )  @Valid @RequestBody EmployeeDto employeeDto);

}
