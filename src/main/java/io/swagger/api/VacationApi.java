/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import ru.fds.hrdepartment.dto.VacationDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-29T00:16:51.113+06:00")

@Api(value = "vacation", description = "the vacation API")
public interface VacationApi {

    @ApiOperation(value = "get last vacation by employee", nickname = "getLastVacationByEmployee", notes = "", response = VacationDto.class, tags={ "vacationController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/vacation/employee_last",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<VacationDto> getLastVacationByEmployee(@NotNull @ApiParam(value = "employeeId", required = true) @Valid @RequestParam(value = "employeeId", required = true) Long employeeId);


    @ApiOperation(value = "get vacation by id", nickname = "getVacation", notes = "", response = VacationDto.class, tags={ "vacationController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/vacation/{vacationId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<VacationDto> getVacation(@ApiParam(value = "vacationId",required=true) @PathVariable("vacationId") Long vacationId);


    @ApiOperation(value = "insert new Vacation", nickname = "insertVacation", notes = "", response = VacationDto.class, tags={ "vacationController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/vacation/new",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<VacationDto> insertVacation(@ApiParam(value = "vacationDto" ,required=true )  @Valid @RequestBody VacationDto vacationDto);


    @ApiOperation(value = "update vacation", nickname = "updateVacation", notes = "", response = VacationDto.class, tags={ "vacationController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/vacation/update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<VacationDto> updateVacation(@ApiParam(value = "vacationDto" ,required=true )  @Valid @RequestBody VacationDto vacationDto);

}
