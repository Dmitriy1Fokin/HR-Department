/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import ru.fds.hrdepartment.dto.DepartmentDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-29T00:16:51.113+06:00")

@Api(value = "dep", description = "the dep API")
public interface DepApi {

    @ApiOperation(value = "get total work hours in department today", nickname = "getWorkHoursInDepartment", notes = "", response = Integer.class, tags={ "departmentController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/dep/total_hour",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getWorkHoursInDepartment(@NotNull @ApiParam(value = "departmentId", required = true) @Valid @RequestParam(value = "departmentId", required = true) Long departmentId);


    @ApiOperation(value = "insert new department", nickname = "insertDepartment", notes = "", response = DepartmentDto.class, tags={ "departmentController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DepartmentDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/dep/new",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DepartmentDto> insertDepartment(@ApiParam(value = "departmentDto" ,required=true )  @Valid @RequestBody DepartmentDto departmentDto);


    @ApiOperation(value = "update department", nickname = "updateDepartment", notes = "", response = DepartmentDto.class, tags={ "departmentController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DepartmentDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/dep/update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DepartmentDto> updateDepartment(@ApiParam(value = "departmentDto" ,required=true )  @Valid @RequestBody DepartmentDto departmentDto);

}
