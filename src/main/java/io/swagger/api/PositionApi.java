/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import ru.fds.hrdepartment.dto.PositionDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-11T10:14:57.918+03:00")

@Api(value = "position", description = "the position API")
public interface PositionApi {

    @ApiOperation(value = "get position by id", nickname = "getPosition", notes = "", response = PositionDto.class, tags={ "positionController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PositionDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/position/{positionId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<PositionDto> getPosition(@ApiParam(value = "positionId",required=true) @PathVariable("positionId") Long positionId);


    @ApiOperation(value = "insert new position", nickname = "insertPosition", notes = "", response = PositionDto.class, tags={ "positionController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PositionDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/position/new",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PositionDto> insertPosition(@ApiParam(value = "positionDto" ,required=true )  @Valid @RequestBody PositionDto positionDto);


    @ApiOperation(value = "update position", nickname = "updatePosition", notes = "", response = PositionDto.class, tags={ "positionController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PositionDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/position/update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<PositionDto> updatePosition(@ApiParam(value = "positionDto" ,required=true )  @Valid @RequestBody PositionDto positionDto);

}
